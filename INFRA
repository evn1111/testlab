Серверы
Для веб-приложения myapp поставим два (или больше) сервера на Windows, потому что оно работает на IIS.
Перед ними поставим балансировщик нагрузки — что-то вроде разводящего, который смотрит, какой сервер свободен, и отправляет запросы туда.
Если один сервер сломается, балансировщик просто переключится на другой, и всё продолжит работать.

Докер-приложения лучше запускать на Linux-серверах — они дешевле и лучше дружат с контейнерами.
Чтобы они не падали абы как, соберём их в кластер k8s. 
Тогда если один контейнер или даже целый сервер откажет, система сама перезапустит их на других машинах.

Базы данных
Тут без вариантов — надо делать резервные копии в реальном времени.

Для MSSQL (куда ходит myapp) настроим Always On — это такая штука, которая держит синхронизированную копию базы на другом сервере. 
Если основной упадёт, резервный тут же подхватит нагрузку.

PostgreSQL и MongoDB тоже развернём с репликами. У PostgreSQL будет мастер (основной) и пара реплик,
у MongoDB — replica set (группа серверов, где данные дублируются). Если что-то сломается, система автоматически выберет нового лидера.

По итогу, пользователь стучится на сайт → балансировщик отправляет его на один из рабочих IIS-серверов → myapp берёт данные из MSSQL и дергает нужные dockerApp-* → те, в свою очередь, ходят в свои базы (PostgreSQL или MongoDB).

Пользователи
      │
      ▼
[ Load Balancer (Nginx/HAProxy) ]  ← Если балансировщик упадёт, можно добавить второй в режиме active/passive.
      │
      ├───────────────┐
      ▼               ▼
[ IIS Server 1 ]   [ IIS Server 2 ]  ← Дублирующие серверы myapp. Один падает — трафик идёт на другой.
      │               │
      ├───────┐       └───────┐
      ▼       ▼               ▼
[ MSSQL Primary ]    [ MSSQL Secondary ]  ← AlwaysOn Group. При падении Primary автоматически становится Secondary.
      │       │               │
      ▼       ▼               ▼
[ Kubernetes Cluster ]  ← Управляет всеми dockerApp-*.
      │
      ├─────────────────┐
      ▼                 ▼
[ PostgreSQL Master ] [ MongoDB ReplicaSet ]
      │                 │
      ▼                 ▼
[ PostgreSQL Replica ] [ MongoDB Replica ]  ← Реплики подхватывают нагрузку при сбое основного узла.